<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.github.terminological</groupId>
	<artifactId>html2pdfr</artifactId>
	<version>0.4.3</version>
	<description>R wrapper for OpenHTMLtoPDF java library</description>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- Must be Java 8 for standard rJava implementation -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<r6.version>main-SNAPSHOT</r6.version>
		<openhtml.version>1.0.10</openhtml.version>
		<open.batik.version>1.14</open.batik.version>

	    <!-- Please keep xmlgraphics-commons up to date with batik. -->
	    <open.xmlgraphics.commons.version>2.6</open.xmlgraphics.commons.version>

    	<!-- NB: Rhino is an optional dependency of Batik-Bridge. This version should match
         the version specified by Batik-Bridge. -->
    	<open.rhino.version>1.7.13</open.rhino.version>
	</properties>

	<name>Java html to pdf for R</name>

	<dependencies>
		<dependency>
			<groupId>io.github.terminological</groupId>
			<artifactId>r6-generator-runtime</artifactId>
			<version>${r6.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-core</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-pdfbox</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-rtl-support</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-svg-support</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>org.jsoup</groupId>
			<artifactId>jsoup</artifactId>
			<version>1.11.3</version>
		</dependency>

		<dependency>
<!-- 			Rhino is included here just to make sure SVG scripts are NOT executed  -->
<!-- 				when there is a script engine available. Rhino is only an optional dependency  -->
<!-- 				for Batik so we have to include it explicitly. -->
			<groupId>org.mozilla</groupId>
			<artifactId>rhino</artifactId>
			<version>${open.rhino.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-mathml-support</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-java2d</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-objects</artifactId>
			<version>${openhtml.version}</version>
		</dependency>
		<dependency>
			<groupId>com.openhtmltopdf</groupId>
			<artifactId>openhtmltopdf-latex-support</artifactId>
			<version>${openhtml.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.22</version>
		</dependency>
		<!--  intercept openhtml2pdfs use of commons-logging -->
		<dependency>
		    <groupId>com.openhtmltopdf</groupId>
		    <artifactId>openhtmltopdf-slf4j</artifactId>
		    <version>${openhtml.version}</version>
		</dependency>

		<!-- tests -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.4.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.4.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<!-- Resolve runtime library on sonatype OSSRH -->
	<!-- not needed if you plan to use a stable r6.version of the r6-generator-runtime 
		and r6-generator-maven-plugin rather than main-SNAPSHOT -->
	<repositories>
		<repository>
			<id>Sonatype OSSRH</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>
	</repositories>

	<!-- Resolve maven plugin on sonatype OSSRH -->
	<pluginRepositories>
		<pluginRepository>
			<id>Sonatype OSSRH</id>
			<url>https://s01.oss.sonatype.org/content/repositories/snapshots/</url>
		</pluginRepository>
	</pluginRepositories>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>${maven.compiler.source}</source>
					<target>${maven.compiler.target}</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19</version>
				<configuration>
					<argLine>-Xmx4096m</argLine>
				</configuration>
			</plugin>
			<plugin>
				<groupId>io.github.terminological</groupId>
				<artifactId>r6-generator-maven-plugin</artifactId>
				<version>${r6.version}</version>
				<configuration>
					<packageData>
						<title>R wrapper for OpenHTMLtoPDF java library</title>
						<version>${project.version}</version>
						<debug>false</debug>
						<url>https://terminological.github.io/html2pdfr/docs/index.html</url>
						<doi>10.5281/zenodo.6576088</doi>
						<githubOrganisation>terminological</githubOrganisation>
						<githubRepository>html2pdfr</githubRepository>
						<useRoxygen2>true</useRoxygen2>
						<usePkgdown>true</usePkgdown>
						<useJavadoc>false</useJavadoc>
						<rjavaOpts>
							<rjavaOpt>-Xmx4096M</rjavaOpt>
						</rjavaOpts>
						<packageName>html2pdfr</packageName>
						<defaultLogLevel>WARN</defaultLogLevel>
						<license>LGPL-3</license> <!-- to fit with openhtml2pdf -->
						<preCompileBinary>true</preCompileBinary>
						<packageAllDependencies>true</packageAllDependencies>
						<description>
							HTML and CSS do a good job at automatically laying out and styling content particularly in tables, however it is not natively designed for pagination. 
							This library converts HTML content into PDF and PNG formats for embedding into LaTeX documents, within the constraints of page sizes. 
							It allows use of HTML table layout from HTML first libraries such as 'gt' and 'huxtable' within latex documents. It allows HTML content to grow in width up to the page dimensions, but preventing it from overflowing, and without forcing table layout to be wider than it would normally be.
							This heurisitic calculation of the output size up to fit within set limits is one of the differentiators between this and other HTML to PDF converters. 
							Although the focus is on tables, any basic HTML content can be rendered, including simple SVG and MathML, up to the support of the underlying HTML rendering engine (https://github.com/danfickle/openhtmltopdf).   
						</description>
						<maintainerName>Rob</maintainerName>
						<maintainerFamilyName>Challen</maintainerFamilyName>
						<maintainerEmail>rob.challen@bristol.ac.uk</maintainerEmail>
						<maintainerOrganisation>University of Bristol</maintainerOrganisation>
						<maintainerORCID>0000-0002-5504-7768</maintainerORCID>
					</packageData>
					<outputDirectory>${project.basedir}/..</outputDirectory>
				</configuration>
				<executions>
					<execution>
						<id>clean-r-library</id>
						<goals>
							<goal>clean-r-library</goal>
						</goals>
					</execution>
					<execution>
						<id>flatten-pom</id>
						<goals>
							<goal>flatten-pom</goal>
						</goals>
					</execution>
					<execution>
						<id>generate-r-library</id>
						<goals>
							<goal>generate-r-library</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
