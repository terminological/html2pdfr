% Generated by r6-generator-maven-plugin: do not edit by hand

\name{HtmlConverter}

\alias{HtmlConverter}

\title{HtmlConverter}

\arguments{
	\if{html}{\out{<div class="arguments">}}
	\item{fontfiles}{fontfiles - a character vector of font files that will be imported into the converter. - (defaulting to extrafont::fonttable()$fontfile) - (java expects a RCharacterVector)}
	\if{html}{\out{</div>}}
}


\description{
missing description

Version: 0.3.0

Generated: 2022-06-22T15:33:09.068115
}

\details{
	no details
}

\examples{\dontrun{
J = html2pdfr::JavaApi$get();
instance = J$HtmlConverter$new(fontfiles)

## -----------------------------------
## Method `HtmlConverter$urlToPdf`
## -----------------------------------

## -----------------------------------
## Method `HtmlConverter$urlComponentToPdf`
## -----------------------------------

## -----------------------------------
## Method `HtmlConverter$fileToPdf`
## -----------------------------------

## -----------------------------------
## Method `HtmlConverter$stringToPdf`
## -----------------------------------

## -----------------------------------
## Method `HtmlConverter$fitIntoPage`
## -----------------------------------

## -----------------------------------
## Method `HtmlConverter$fitIntoA4`
## -----------------------------------

}}

\keyword{java api}

\section{Methods}{
	\subsection{Constructors}{
		\itemize{
			\item \href{#method-new}{\code{J$HtmlConverter$new(fontfiles)}}
		}
	}
	\subsection{Static methods}{
		\itemize{
			\item{none}
		}
	}
	\subsection{Instance methods}{
		\itemize{
			\item \href{#method-urlToPdf}{\code{instance$urlToPdf(htmlUrl, outFile)}}
			\item \href{#method-urlComponentToPdf}{\code{instance$urlComponentToPdf(htmlUrl, outFile, cssSelector)}}
			\item \href{#method-fileToPdf}{\code{instance$fileToPdf(inFile, outFile)}}
			\item \href{#method-stringToPdf}{\code{instance$stringToPdf(html, outFile, baseUri)}}
			\item \href{#method-fitIntoPage}{\code{instance$fitIntoPage(htmlFragment, outFile, maxWidthInches, maxHeightInches, formats, pngDpi)}}
			\item \href{#method-fitIntoA4}{\code{instance$fitIntoA4(htmlFragment, outFile, xMarginInInches, yMarginInInches, formats)}}
			\item \code{instance$clone()}
			\item \code{instance$print()}
		}
	}

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-new"></a>}}
	
	\subsection{Method \code{new()}}{
		Create a new HtmlConverter for creating PDF and PNG files from HTML.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
J$HtmlConverter$new(fontfiles)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{fontfiles - a character vector of font files that will be imported into the converter. - (defaulting to extrafont::fonttable()$fontfile)}{ - (java expects a RCharacterVector)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 HtmlConverter object: 
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-urlToPdf"></a>}}
	
	\subsection{Method \code{urlToPdf()}}{
		Convert HTML from a URL to a PDF file. PDF size will be controlled by page media directives within the html.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
instance = J$HtmlConverter$new(...);
instance$urlToPdf(htmlUrl, outFile)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{htmlUrl the URL}{ - (java expects a String)}
				\item{outFile the full path of the output file}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: the filename written to (with extension '.pdf' if outFile did not have an extension).
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-urlComponentToPdf"></a>}}
	
	\subsection{Method \code{urlComponentToPdf()}}{
		Convert HTML from a URL to a PDF file. PDF size will be controlled by page media directives within the html.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
instance = J$HtmlConverter$new(...);
instance$urlComponentToPdf(htmlUrl, outFile, cssSelector)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{htmlUrl the URL}{ - (java expects a String)}
				\item{outFile the full path of the output file}{ - (java expects a String)}
				\item{cssSelector the part of the page you want to convert to PDF.}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: the filename written to (with extension '.pdf' if outFile did not have an extension).
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-fileToPdf"></a>}}
	
	\subsection{Method \code{fileToPdf()}}{
		Convert HTML from a local file to a PDF file. PDF size will be controlled by page media directives within the html.
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
instance = J$HtmlConverter$new(...);
instance$fileToPdf(inFile, outFile)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{inFile the full path to an input HTML file}{ - (java expects a String)}
				\item{outFile the full path to the output pdf file. (N.B. this function can also output PNG if specified in the filename extension)}{ - (java expects a String)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: the filename written to (with extension '.pdf' if outFile did not have an extension).
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-stringToPdf"></a>}}
	
	\subsection{Method \code{stringToPdf()}}{
		no description
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
instance = J$HtmlConverter$new(...);
instance$stringToPdf(html, outFile, baseUri)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{html the HTML string}{ - (java expects a String)}
				\item{outFile the full path to the output pdf file (N.B. this function can also output PNG if specified in the filename extension)}{ - (java expects a String)}
				\item{baseUri optionally the base URI of the HTML string for resolving relative URLs in the HTML (e.g. CSS files). - (defaulting to NA_character_)}{ - (java expects a RCharacter)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacter: the filename written to (with extension '.pdf' if outFile did not have an extension).
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-fitIntoPage"></a>}}
	
	\subsection{Method \code{fitIntoPage()}}{
		Render HTML string to fit into a page,
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
instance = J$HtmlConverter$new(...);
instance$fitIntoPage(htmlFragment, outFile, maxWidthInches, maxHeightInches, formats, pngDpi)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{htmlFragment a HTML fragment, e.g. the table element. It is usually expected there will not be any page media directives in the HTML}{ - (java expects a String)}
				\item{outFile the full path to the output pdf file (N.B. this function can also output PNG if specified in the filename extension)}{ - (java expects a String)}
				\item{maxWidthInches what is the maximum allowable width? - (defaulting to 6.25)}{ - (java expects a double)}
				\item{maxHeightInches what is the maximium allowable height? (if the content is larger than this then it will overflow to another page) - (defaulting to 9.75)}{ - (java expects a double)}
				\item{formats If the outFile does not specify a file extension then you can do so here as "png" or "pdf" or both. - (defaulting to c('pdf','png'))}{ - (java expects a RCharacterVector)}
				\item{pngDpi if outputting a PNG the dpi will determine the dimensions of the image. - (defaulting to 300)}{ - (java expects a double)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacterVector: the filename(s) written to (with extension '.pdf' and '.png' if outFile did not have an extension).
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-fitIntoA4"></a>}}
	
	\subsection{Method \code{fitIntoA4()}}{
		Render HTML string to fit into an A4 page,
	

		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
instance = J$HtmlConverter$new(...);
instance$fitIntoA4(htmlFragment, outFile, xMarginInInches, yMarginInInches, formats)
  			}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\itemize{
				\item{htmlFragment a HTML fragment, e.g. the table element. It is usually expected there will not be any page media directives in the HTML}{ - (java expects a String)}
				\item{outFile the full path to the output pdf file (N.B. this function can also output PNG if specified in the filename extension)}{ - (java expects a String)}
				\item{xMarginInInches page margins - (defaulting to 1.0)}{ - (java expects a double)}
				\item{yMarginInInches page margins - (defaulting to 1.0)}{ - (java expects a double)}
				\item{formats If the outFile does not specify a file extension then you can do so here as "png" or "pdf" or both. - (defaulting to c('pdf','png'))}{ - (java expects a RCharacterVector)}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			RCharacterVector: the filename(s) written to (with extension '.pdf' and '.png' if outFile did not have an extension).
		}

		\subsection{Examples}{
			\if{html}{\out{<div class="r example copy">}}
			\preformatted{
not available
			}
			\if{html}{\out{</div>}}
		}
	}
}