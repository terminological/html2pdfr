% Generated by r6-generator-maven-plugin: do not edit by hand

\name{JavaApi}

\alias{JavaApi}

\title{R wrapper for OpenHTMLtoPDF java library}

\section{Usage}{
	\if{html}{\out{<div class="r">}}
	\preformatted{
 J = html2pdfr::JavaApi$get(logLevel)
 	}
  \if{html}{\out{</div>}}
}

\arguments{
	\if{html}{\out{<div class="arguments">}}
	\item{logLevel}{optional - the slf4j log level as a string - one of OFF (most specific, no logging), 
	FATAL (most specific, little data), ERROR, WARN, INFO, DEBUG, 
	TRACE (least specific, a lot of data), ALL (least specific, all data)}
	\if{html}{\out{</div>}}
}

\description{
This library is really designed to help get PDF or PNG formats of HTML tables, with layout determined by page size and control of styling determined by CSS. This allows use of HTML table layout within latex documents. Although tabular content should be allowed to grow up to the page dimensions, we don't want to force table layout to be a set width, but preventing it from overflowing bounding boxes is also essential. This automatic calculation of the output size up to set limits, is one of the differentiators between this and other options. This library also has no other dependencies making it suitable for server installations. Although the focus is on tables, any basic HTML content can be rendered including SVG and MathML, up to the support of the underlying HTML rendering engine (https://github.com/danfickle/openhtmltopdf). This does not for example include javascript which would be required for D3 content or rendering shiny apps, and for which webshot or webshot2 would be a better option. For correct handling of fonts the paths to local .ttf files must be supplied, but if this is set up we should be able to render all fonts correctly.

Version: 0.3.0

Generated: 2022-06-23T00:05:54.004365
}

\author{\email{rob.challen@bristol.ac.uk}}

\keyword{java api}

\section{Static methods and constructors}{
	\itemize{
		\item \code{JavaApi$get()}
		\item \href{#method-HtmlConverter-new}{\code{J$HtmlConverter$new(fontfiles)}}
	}
	

	\if{html}{\out{<hr>}}
	\if{html}{\out{<a id="method-HtmlConverter-new"></a>}}
	
	\subsection{Method \code{HtmlConverter$new()}}{
		Create a new HtmlConverter for creating PDF and PNG files from HTML.
	
		\subsection{Usage}{
			\if{html}{\out{<div class="r">}}
			\preformatted{
J = html2pdfr::JavaApi$get()
J$HtmlConverter$new(fontfiles)
	  		}
			\if{html}{\out{</div>}}
		}
	
		\subsection{Arguments}{
			\if{html}{\out{<div class="arguments">}}
			\describe{
				\itemize{
					\item{fontfiles - a character vector of font files that will be imported into the converter. - (defaulting to extrafont::fonttable()$fontfile)}{ - (java expects a RCharacterVector)}
				}
			}
			\if{html}{\out{</div>}}
		}

		\subsection{Returns}{
			R6 HtmlConverter object: 
		}
	}

}